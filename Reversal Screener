import pandas as pd
import numpy as np
from scipy import integrate
import yfinance as yf
from datetime import datetime

def calculate_adaptive_indicators(df, ma_period=200, lookback=30):
    df['MA200'] = df['Close'].rolling(window=ma_period).mean()
    price = df['Close'].values
    ma200 = df['MA200'].values
    slopes = np.zeros(len(df))
    convexity = np.zeros(len(df))
    
    for i in range(ma_period + lookback, len(df)):
        ma_window = ma200[i-lookback:i+1]
        t_window = np.arange(lookback + 1)
        
        start_ma, end_ma = ma_window[0], ma_window[-1]
        slope = (end_ma - start_ma) / lookback
        secant = start_ma + slope * t_window
        
        area = integrate.trapz(secant - ma_window, t_window)
        normalized_area = (area / price[i]) * lookback
        
        slopes[i] = 100 * np.tanh((slope / close[i]) * 100 * lookback)
        convexity[i] = 100 * np.tanh(normalized_area)
    
    results_df = pd.DataFrame({
        'datetime': df.index[ma_period+lookback:],
        'convexity': convexity[ma_period+lookback:],
        'slope': slopes[ma_period+lookback:],
        'price': price[ma_period+lookback:],
        'ma': ma200[ma_period+lookback:]
    })
    
    return results_df.set_index('datetime')

def screen_tickers(tickers, intervals=['15m', '30m', '1h']):
    results = []
    
    today = datetime.now().date()
    
    for ticker in tickers:
        for interval in intervals:
            try:
                data = yf.download(ticker, period='60d', interval=interval)
                indicators = calculate_adaptive_indicators(data)
                
                bullish_conditions = (
                    (indicators['slope'].shift(1) < 0) & 
                    (indicators['slope'] > 0) & 
                    (indicators['convexity'] > 0) &
                    (indicators['price'] > indicators['ma'])
                )
                
                bearish_conditions = (
                    (indicators['slope'].shift(1) > 0) & 
                    (indicators['slope'] < 0) & 
                    (indicators['convexity'] < 0) &
                    (indicators['price'] < indicators['ma'])
                )
                
                bullish_transitions = indicators[bullish_conditions]
                bearish_transitions = indicators[bearish_conditions]
                
                for idx, row in bullish_transitions.iterrows():
                    results.append({
                        'Ticker': ticker,
                        'Timeframe': interval,
                        'Datetime': idx.tz_localize(None),
                        'Sentiment': 'Bullish',
                        'Slope': row['slope'],
                        'Convexity': row['convexity'],
                        'Price': row['price'],
                        'MA': row['ma']
                    })
                
                for idx, row in bearish_transitions.iterrows():
                    results.append({
                        'Ticker': ticker,
                        'Timeframe': interval,
                        'Datetime': idx.tz_localize(None),
                        'Sentiment': 'Bearish',
                        'Slope': row['slope'],
                        'Convexity': row['convexity'],
                        'Price': row['price'],
                        'MA': row['ma']
                    })
                
            except Exception as e:
                print(f"Error processing {ticker} on {interval}: {e}")
    
    results_df = pd.DataFrame(results)
    results_df['Datetime'] = pd.to_datetime(results_df['Datetime'])
    
    filtered_results = results_df[
        results_df['Datetime'].dt.date.isin([today])
    ]
    
    if not filtered_results.empty:
        filtered_results.to_csv('trend_screener_results.csv', index=False)
        print("Results exported to trend_screener_results.csv")
    else:
        print("No transitions")
    
    return filtered_results

SPY = [
    "AAPL", "NVDA", "MSFT", "AMZN", "META", "GOOGL", "TSLA", "BRK.B", "GOOG", "AVGO","JPM", "LLY", "UNH", "V", 
    "XOM", "MA", "COST", "HD", "PG", "WMT", "NFLX", "JNJ","ABBV", "BAC", "CRM", "ORCL", "CVX", "WFC", "MRK", 
    "KO", "CSCO", "ADBE", "ACN","PEP", "AMD", "LIN", "NOW", "DIS", "MCD", "IBM", "ABT", "PM", "TMO", "GE", "CAT",
    "GS", "ISRG", "VZ", "TXN", "INTU", "BKNG", "QCOM", "AXP", "SPGI", "T", "CMCSA","MS", "NEE", "RTX", "PGR", "LOW", 
    "DHR", "AMGN", "UBER", "HON", "UNP", "ETN","PFE", "TJX", "BLK", "AMAT", "COP", "BX", "C", "BSX", "SYK", "PLTR", 
    "FI", "ADP","PANW", "SCHW", "TMUS", "BMY", "VRTX", "DE", "GILD", "SBUX", "MMC", "LMT", "BA", "MDT", "PLD", "CB",
    "MU", "KKR", "ADI", "ANET", "INTC", "UPS", "MO", "SO", "AMT", "NKE", "CI", "TT", "LRCX", "ELV", "EQIX", "ICE", 
    "GEV", "SHW", "DUK", "PH", "PYPL", "APH", "MDLZ", "PNC", "CME", "AON", "CMG", "KLAC", "SNPS", "MSI", "USB", "CDNS",
    "WM", "MCK", "WELL", "CRWD", "REGN", "ZTS", "CEG", "CL", "MCO", "CTAS", "EMR", "EOG","CVS", "ITW", "APD", "COF", 
    "GD", "MMM", "ORLY", "WMB", "CSX", "TDG", "AJG", "FDX","NOC", "MAR", "OKE", "CARR", "BDX", "TFC", "FCX", "ECL", 
    "ADSK", "NSC", "GM", "SLB","HLT", "TRV", "PCAR", "ABNB", "ROP", "HCA", "BK", "DLR", "TGT", "FTNT", "SRE", "NXPI",
    "FICO", "AFL", "URI", "RCL", "SPG", "AMP", "JCI", "PSX", "CPRT", "PSA", "ALL", "AZO","KMI", "GWW", "AEP", "VST", 
    "MPC", "MET", "ROST", "CMI", "O", "PWR", "DHI", "AIG", "D", "NEM", "FAST", "HWM", "MSCI", "PEG", "KMB", "PAYX", 
    "FIS", "LHX", "CCI", "PRU","PCG", "KVUE", "TEL", "DFS", "AXON", "AME", "RSG", "VLO", "TRGP", "COR", "EW", "F",
    "BKR", "CTVA", "CBRE", "ODFL", "LEN", "IR", "VRSK", "OTIS", "DAL", "XEL", "HES", "A", "KR", "CTSH", "IT", "EXC",
    "EA", "YUM", "MNST", "GEHC", "CHTR", "VMC", "ACGL", "SYY", "GLW", "STZ", "MTB", "GIS", "LULU", "NUE", "KDP", "RMD",
    "EXR", "IRM", "MCHP", "MLM", "HIG", "DELL", "HUM", "ED", "WAB", "IQV", "DD", "IDXX", "NDAQ", "VICI", "EIX", "HPQ",
    "OXY", "AVB", "CSGP", "ROK", "ETR", "FANG", "GRMN", "FITB", "WTW", "EFX", "WEC", "UAL", "RJF", "CNC", "EBAY", "DXCM",
    "DOW", "TPL", "XYL", "TSCO", "ANSS", "GPN", "TTWO", "ON", "CAH", "STT", "KEYS", "DECK", "PPG", "PHM", "DOV", "NVR", 
    "HAL", "GDDY", "KHC", "FTV", "TROW", "BR", "MPWR", "HPE", "SW", "CHD", "AWK", "EQT", "TYL", "BRO", "VLTO", "VTR",
    "SYF", "EQR", "CPAY", "MTD", "HBAN", "DTE", "ADM", "PPL", "HSY", "CCL", "AEE", "NTAP", "CINF", "RF", "HUBB", "SBAC",
    "PTC", "DVN", "CDW", "ATO", "WST", "WY", "WDC", "BIIB", "IFF", "WBD", "ES", "EXPE", "WAT", "ZBH", "TDY", "CBOE", "NTRS",
    "LDOS", "PKG", "LYV", "FE", "K", "LYB", "CFG", "BLDR", "STE", "CNP", "CMS", "STX", "ZBRA", "DRI", "CLX", "STLD",
    "FSLR", "COO", "OMC", "NRG", "LH", "IP", "ESS", "CTRA", "INVH", "MKC", "WRB", "SNA", "LUV", "MAA", "BALL", "PODD", "PFG",
    "FDS", "HOLX", "TSN", "DGX", "LVS", "KEY", "PNR", "ULTA", "TRMB", "J", "GPC", "SMCI", "TER", "MAS", "IEX", "MOH",
    "KIM", "BBY", "ARE", "NI", "EL", "EXPD", "BAX", "EG", "DG", "GEN", "DPZ", "AVY", "LNT", "ALGN", "VRSN", "CF", "TXT",
    "L", "VTRS", "DOC", "JBHT", "AMCR", "JBL", "EVRG", "APTV", "MRNA", "FFIV", "DLTR", "POOL", "ROL", "RVTY", "AKAM", "NDSN",
    "TPR", "EPAM", "UDR", "SWKS", "SWK", "CPT", "KMX", "CAG", "HST", "ALB", "JKHY", "DAY", "BG", "SJM", "REG", "CHRW", "ALLE",
    "EMN", "UHS", "INCY", "BXP", "TECH", "JNPR", "NCLH", "AIZ", "IPG", "GNRC", "PAYC", "CTLT", "LW", "NWSA", "ERIE", "TAP", 
    "PNW", "FOXA", "LKQ", "CRL", "GL", "SOLV", "MKTX", "HSIC", "ENPH", "HRL", "AES", "CPB", "TFX", "RL", "AOS", "FRT", 
    "MGM", "WYNN", "MTCH", "HAS", "APA", "CZR", "MOS", "IVZ", "CE", "BWA", "HII", "DVA", "FMC", "MHK", "BEN", 
    "WBA", "QRVO", "PARA", "FOX", "NWS","AMTM"
]
 


results = screen_tickers(SPY)
print(results)

